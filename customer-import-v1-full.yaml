openapi: 3.0.3
info:
  title: Customer Import API
  version: '1.0'
servers:
- url: '{protocol}://{servername}:{port}/{base-path}'
  description: URL for the Cloud4Retail API test server
  variables:
    protocol:
      default: https
    servername:
      default: api.cloud4retail.com
      description: Server name
    port:
      default: '443'
      description: Server port
    base-path:
      default: api/customer-profile/rest/import/v1
      description: Context path of the called API
tags:
- name: Customer import
  description: Bulk import of customers
paths:
  /customers:
    post:
      security:
      - bearerAuth:
        - b:cust.customer.importer
      tags:
      - Customer import
      operationId: importCustomers
      summary: Import customers.
      parameters:
      - name: GK-Change-Reason
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ReasonOfChange'
      - name: GK-Change-Reason-Id
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ReasonOfChangeId'
      - name: GK-Passport
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/GKPassport'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCustomersRequest'
      responses:
        '201':
          description: Response for successful customers import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCustomersResponse'
        '400':
          $ref: '#/components/responses/400_BadRequest'
        '401':
          $ref: '#/components/responses/401_Unauthorized'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ImportCustomersRequest:
      description: Request for import of customers that contains list of customers
        with complete data.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ImportCustomer'
          minItems: 0
          maxItems: 100
      required:
      - data
    ImportCustomer:
      description: Customer import data object.
      type: object
      properties:
        changeType:
          $ref: '#/components/schemas/ImportChangeType'
        type:
          $ref: '#/components/schemas/CustomerType'
        person:
          $ref: '#/components/schemas/ImportPersonalCustomer'
        organization:
          $ref: '#/components/schemas/ImportOrganizationalCustomer'
      required:
      - changeType
      - type
    ImportPersonalCustomer:
      description: |
        Personal customer import data object.
        It is required to define at least one of properties that can uniquely identify the customer: customerId, username or default email (the email with contactPurposeTypeCode=DEFAULT and ContactMethodTypeCode=HOMEEMAIL).
        For DELETE import change type only the identifying properties are relevant, the rest filled properties are ignored.
      type: object
      allOf:
      - $ref: '#/components/schemas/CommonImportCustomerProperties'
      - $ref: '#/components/schemas/CommonCustomerProperties'
      - $ref: '#/components/schemas/PersonalCustomerProperties'
      - $ref: '#/components/schemas/PersonalizationConsentRequestProperties'
      - $ref: '#/components/schemas/CustomPropertiesFieldXX30_256'
      - $ref: '#/components/schemas/CommonImportCustomerProperties'
    ImportOrganizationalCustomer:
      description: |
        Organizational customer import data object.
        It is required to define at least one of properties that can uniquely identify the customer: customerId, username or default email (the email with contactPurposeTypeCode=DEFAULT and ContactMethodTypeCode=HOMEEMAIL).
        For DELETE import change type only the identifying properties are relevant, the rest filled properties are ignored.
      type: object
      allOf:
      - $ref: '#/components/schemas/CommonImportCustomerProperties'
      - $ref: '#/components/schemas/CommonCustomerProperties'
      - $ref: '#/components/schemas/OrganizationalCustomerProperties'
      - $ref: '#/components/schemas/PersonalizationConsentRequestProperties'
      - $ref: '#/components/schemas/CustomPropertiesFieldXX30_256'
      - $ref: '#/components/schemas/CommonImportCustomerProperties'
    ImportCustomersResponse:
      description: Response for the import of customers that contains a list of import
        results for individual customers.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CustomerImportResult'
          minItems: 0
          maxItems: 100
      required:
      - data
    CustomerImportResult:
      description: |
        Result of the customer import.
        These customer identifying properties (customerId, username, email) are filled only when they are defined in the original request or they are known from the customer record.
      type: object
      properties:
        customerId:
          $ref: '#/components/schemas/CustomerId'
        username:
          $ref: '#/components/schemas/Username'
        email:
          $ref: '#/components/schemas/Email'
        changeType:
          $ref: '#/components/schemas/ImportChangeType'
        result:
          $ref: '#/components/schemas/ImportResult'
      required:
      - changeType
      - result
    ImportChangeType:
      description: |
        Type of the import change
        - CREATE - a new customer to be created. If the customer with the same identification already exists, no change is performed and CONFLICT is returned as the import result.
        - UPDATE - an existing customer to be updated. If the customer does not exist, no change is performed and NOT_FOUND is returned as the import result.
        - UPSERT - updates an existing customer with the same identification or creates a new one if such customer does not exist yet.
        - DELETE - an existing customer to be deleted. Note that for this change type only the identifying properties are relevant (customerId, username or default email), the rest filled properties are ignored.
      type: string
      x-extensible-enum:
      - CREATE
      - UPDATE
      - UPSERT
      - DELETE
    ImportResult:
      description: |
        Import results
        - SUCCESS - the import operation was successful (the customer was created, updated or deleted).
        - NOT_FOUND - the customer was not found (valid for UPDATE and DELETE import change types)
        - FAILED - the operation has failed and may be repeated later (e.g. because of some timeout or temporary outage)
        - ERROR - the operation has been finished with an error and cannot be repeated later (e.g. the import customer data object is invalid)
        - CONFLICT - the operation cannot be performed, because the customer already exists (for the CREATE import change type) or the updating values conflict with some another already existing customer (for the UPDATE or UPSERT import change types)
      type: string
      x-extensible-enum:
      - SUCCESS
      - NOT_FOUND
      - FAILED
      - ERROR
      - CONFLICT
    CommonImportCustomerProperties:
      description: Customer properties common for all customer types.
      type: object
      properties:
        customerId:
          description: A unique identifier for the customer. If it is empty, the value
            will be generated.
          allOf:
          - $ref: '#/components/schemas/CustomerId'
        username:
          description: Customer username. If it is empty, it is filled with the default
            email address (the email with contactPurposeTypeCode=DEFAULT and ContactMethodTypeCode=HOMEEMAIL).
          allOf:
          - $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        status:
          $ref: '#/components/schemas/CustomerStatus'
        emails:
          description: Emails of the customer. Default email is an email with contactPurposeTypeCode=DEFAULT
            and ContactMethodTypeCode=HOMEEMAIL
          type: array
          items:
            $ref: '#/components/schemas/ImportCustomerEmail'
        phones:
          description: Phone numbers of the customer. Default phone is a phone with
            contactPurposeTypeCode=DEFAULT and ContactMethodTypeCode=HOMETELEPHONE
          type: array
          items:
            $ref: '#/components/schemas/ImportCustomerPhone'
        addresses:
          description: List of the addresses. If provider of the account doesn't provide
            all required fields for an address, the address is not sent to a client.
            Default address is an address with purpose=DEFAULT and ContactMethodTypeCode=HOME
          type: array
          items:
            $ref: '#/components/schemas/ImportCustomerAddress'
    ImportCustomerEmail:
      type: object
      allOf:
      - $ref: '#/components/schemas/CustomerEmail'
      required:
      - contactPurposeTypeCode
      - contactMethodTypeCode
    ImportCustomerPhone:
      type: object
      allOf:
      - $ref: '#/components/schemas/CustomerPhone'
      required:
      - contactPurposeTypeCode
      - contactMethodTypeCode
    ImportCustomerAddress:
      type: object
      allOf:
      - $ref: '#/components/schemas/CustomerAddress'
      required:
      - contactPurposeTypeCode
      - contactMethodTypeCode
    Problem:
      type: object
      description: |
        This document defines a "problem detail" based on rfc-7807 as a way to carry machine- readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs.
      required:
      - type
      - title
      - status
      properties:
        title:
          type: string
          description: |
            A short, human-readable title for the general error type;  the title should not change for given types.
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the error that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.
        type:
          type: string
          description: |
            a URL to a document describing the error condition; may resolve to a human-readable document. This basically is the detailed API error code to categorize the problem.
          example: /problem/connection-error
        status:
          type: integer
          description: |
            Conveying the HTTP status code;  this is so that all information is in one place, but also to correct for changes in the status code due to the usage of proxy servers. The status member,  if present, is only advisory as generators MUST use the same status code in the actual HTTP response to assure that generic HTTP software that does not understand this format still behaves correctly.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        instance:
          type: string
          description: "A URI reference that identifies the specific occurrence of\
            \ the problem. It may or may not yield further information if dereferenced.\
            \ \n      This optional key may be present, with a unique URI for the\
            \ specific error; this may point to an error log for that specific response\
            \ or the original called url when this error occured. \n"
        timestamp:
          type: string
          format: date-time
          example: 2019-02-21T09:10:54.060+0100
          description: The current timestamp when the problem occurred
    CustomerId:
      description: A unique identifier for the customer.
      type: string
      maxLength: 40
    CustomerType:
      description: Determinate if the customer is a person or an organization. Content
        can be either PERSON or ORGANIZATION.
      type: string
      maxLength: 20
      x-extensible-enum:
      - PERSON
      - ORGANIZATION
    Username:
      description: User name.
      type: string
      maxLength: 255
    FirstName:
      description: A person's first name. In western cultures, this is the given name,
        in other cultures it may be the family name.
      type: string
      maxLength: 40
      x-confidential: true
    LastName:
      description: A person's last name. In western cultures, this is the family (or
        patronymic) name, in other cultures it may be the given name.
      type: string
      maxLength: 40
      x-confidential: true
    Salutation:
      description: Extra words that don't form part of the person's name but are normally
        printed before the FirstName as a courtesy title. For instance, Mr. Ms., Miss,
        Dr., Prof. etc. This represents the primary salutation for this Person.
      type: string
      maxLength: 40
    Birthday:
      description: Customer birthday.
      type: string
      format: date
      x-confidential: true
    Email:
      description: Email address.
      type: string
      format: email
      maxLength: 255
      x-confidential: true
    PhoneNumber:
      type: string
      maxLength: 32
      description: Complete phone number
      x-confidential: true
    Street:
      description: Street of the address
      type: string
      maxLength: 40
      x-confidential: true
    StreetNumber:
      description: Street number of the address
      type: string
      maxLength: 10
      x-confidential: true
    PostalCode:
      description: Postal code of the address
      type: string
      maxLength: 15
      x-confidential: true
    City:
      description: City of the address
      type: string
      maxLength: 40
      x-confidential: true
    State:
      description: State of the address
      type: string
      maxLength: 40
    StatisticalUseAllowed:
      description: Denotes if the customer data can be used for statistical purposes.
      type: boolean
    TaxNumber:
      description: Tax ID.
      type: string
      maxLength: 40
    CustomerStatus:
      description: Status of the customer profile.
      type: string
      enum:
      - UNACTIVATED
      - ACTIVE
      - DELETED
      - LOCKED_BY_SECURITY
    Password:
      type: string
      minLength: 1
      maxLength: 255
      x-confidential: true
    BusinessUnitId:
      description: A business unit identification. The identification matches retailStoreId,
        storeNumber, ...
      type: string
      minLength: 1
      maxLength: 32
      example: '9090'
    WorkstationId:
      description: A workstation identification.
      type: string
      minLength: 1
      maxLength: 20
      example: '101'
    DeviceId:
      description: Identification of the device which the data was accessed from.
      type: string
      minLength: 1
      maxLength: 40
    UserId:
      description: Identification of a person performing some internal actions (customer
        data access, age verification, etc.).
      type: string
      minLength: 1
      maxLength: 40
    CustomerName:
      description: customer's firstName + lastName
      type: string
      maxLength: 81
      x-confidential: true
    OrganizationName:
      description: An organization's legal trade name.
      type: string
      maxLength: 40
    OrganizationLegalStatusCode:
      description: Defines a tax classification of the organization.
      type: string
      maxLength: 20
    ReasonOfChange:
      description: Description of reason why data has been exported.
      type: string
      maxLength: 255
    ReasonOfChangeId:
      description: Reason code.
      type: string
      maxLength: 10
    GKPassport:
      description: Passport for unified user and device identity info.
      type: string
    DataProtectCode:
      description: Data protect code used for the evaluation of the data protection
        requirements.
      type: string
      maxLength: 60
    CustomerCardNumber:
      description: The card number.
      type: string
      maxLength: 40
    CustomerCardType:
      description: Type of the customer card. Content can be one of MAIN_CARD, PARTNER_CARD,
        BUSINESS_NUMBER.
      type: string
      x-extensible-enum:
      - MAIN_CARD
      - PARTNER_CARD
      - BUSINESS_NUMBER
    CustomerCardScope:
      description: Scope of the customer card. May by "GLOBAL" if the customer card
        is globally valid or e.g. a countryCode if the card is valid just for a specific
        country. It is possible to define any scope values according to the needs.
      type: string
      maxLength: 40
    CustomerCard:
      description: Customer card.
      type: object
      properties:
        number:
          $ref: '#/components/schemas/CustomerCardNumber'
        type:
          $ref: '#/components/schemas/CustomerCardType'
        scope:
          $ref: '#/components/schemas/CustomerCardScope'
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX5_256'
      required:
      - type
      - number
      - scope
    CustomerIdentificationType:
      description: A type of customer identification.
      type: string
      enum:
      - CUSTOMER_CARD
      - PERSONAL_NUMBER
      - VAT_NUMBER
      - CUSTOMER_ID
      - EMAIL
      - PHONE
      - OTHER
    CustomerIdentifier:
      description: 'A string that may be used to identify a customer. People and businesses
        have multiple forms of such identification: Drivers License number, Passport
        number, Credit / Debit Card number, Company Incorporation number, Tax number,
        Loyalty Card number, etc...'
      type: string
      maxLength: 40
    CustomerIdentifierScope:
      description: Scope of the customer identifier. Some identifiers may have "GLOBAL"
        scope because they are globally unique for a customer (e.g. email, phone),
        some other identifiers may be valid for e.g. a countryCode (country-specific
        customer cards).
      type: string
      enum:
      - GLOBAL
      - COUNTRY
      default: GLOBAL
    CustomerIdentification:
      description: 'A string that may be used to identify a customer. People and businesses
        have multiple forms of such identification: Drivers License number, Passport
        number, Credit / Debit Card number, Company Incorporation number, Tax number,
        Loyalty Card number, etc...'
      properties:
        type:
          $ref: '#/components/schemas/CustomerIdentificationType'
        identifier:
          $ref: '#/components/schemas/CustomerIdentifier'
        scope:
          $ref: '#/components/schemas/CustomerIdentifierScope'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        description:
          description: A description / note related to the customer identification.
            May be useful when the identifierType is OTHER.
          type: string
          maxLength: 255
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX5_256'
      required:
      - type
      - identifier
      - scope
    ContactPurposeTypeCode:
      description: Code denoting a reason for contacting a Party. Content can be one
        of DEFAULT, DELIVERY, INVOICE. Where DELIVERY is the shipping contact and
        INVOICE is the billing contact.
      type: string
      maxLength: 20
      x-extensible-enum:
      - DEFAULT
      - DELIVERY
      - INVOICE
    ContactMethodAddressTypeCode:
      description: 'A retailer assigned code denoting a method of contacting a Party
        at address. Suggested values include: HOME, CONTACT, HOME2.'
      type: string
      maxLength: 20
      x-extensible-enum:
      - HOME
      - CONTACT
      - HOME2
    ContactMethodPhoneTypeCode:
      description: 'A retailer assigned code denoting a method of contacting a Party
        at phone. Suggested values include: HOMETELEPHONE, HOMEMOBILEPHONE, HOMETELEPHONE2,
        HOMEFAX.'
      type: string
      maxLength: 20
      x-extensible-enum:
      - HOMETELEPHONE
      - HOMEMOBILEPHONE
      - HOMETELEPHONE2
      - HOMEFAX
    ContactMethodEmailTypeCode:
      description: 'A retailer assigned code denoting a method of contacting a Party
        at email. Suggested values include: HOMEEMAIL, HOMEEMAIL2, HOMEEMAIL3.'
      type: string
      maxLength: 20
      x-extensible-enum:
      - HOMEEMAIL
      - HOMEEMAIL2
      - HOMEEMAIL3
    CustomerAddress:
      description: |
        Contact address.

        Recommended values for contactPurposeTypeCode and contactMethodTypeCode:
        | Address Type             | ContactPurposeTypeCode | ContactMethodTypeCode |
        | -------------------------| -----------------------| ----------------------|
        | (Main) Delivery Address  | DELIVERY               | HOME                  |
        | (Main) Invoice Address   | INVOICE                | HOME                  |
        | Contact Address          | DEFAULT                | CONTACT               |
        | Contact Delivery Address | DELIVERY               | CONTACT               |
        | Contact Invoice Address  | INVOICE                | CONTACT               |
        | Other Address            | DEFAULT                | HOME2                 |
        | Permanent Address        | DEFAULT                | HOME                  |

        The API allows to use any string value for the contactPurposeTypeCode and the contactMethodTypeCode properties.
        Note that some clients can count with the recommended values. If different values are used, it is possible that the clients won't work correctly.

        The default address is an address with contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOME.

        The address is always stored with both contactPurposeTypeCode and contactMethodTypeCode.
        Although the contactPurposeTypeCode and contactMethodTypeCode are not mandatory, it is very recommended to always fill these values.
        If these values are not filled, DEFAULT value is always automatically filled to the contactPurposeTypeCode and HOME value to the contactMethodTypeCode.
        The next filled contactMethodTypeCode values are HOME2, HOME3, etc.

        If provider of the account doesn't provide all required fields for an address, the address is not sent to a client.
      type: object
      properties:
        addressee:
          type: string
          maxLength: 100
          x-confidential: true
        street:
          $ref: '#/components/schemas/Street'
        streetNumber:
          type: string
          maxLength: 40
          x-confidential: true
        city:
          $ref: '#/components/schemas/City'
        postalCode:
          $ref: '#/components/schemas/PostalCode'
        region:
          type: string
          maxLength: 40
        state:
          $ref: '#/components/schemas/State'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        contactPurposeTypeCode:
          allOf:
          - $ref: '#/components/schemas/ContactPurposeTypeCode'
        contactMethodTypeCode:
          allOf:
          - $ref: '#/components/schemas/ContactMethodAddressTypeCode'
        postalCodeExtension:
          description: The extension of the postal or zip code that further specifies
            a particular postal district.
          type: string
          maxLength: 4
        territory:
          description: A state, province, or other region within a country.
          type: string
          maxLength: 2
        taxHandlingCode:
          description: Tax handling code used for the tax calculation.
          type: string
          maxLength: 2
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX30_256'
      required:
      - city
    CustomerEmail:
      description: |
        Email address.

        Recommended values for contactPurposeTypeCode and contactMethodTypeCode:
        | Telephone Type           | ContactPurposeTypeCode | ContactMethodTypeCode |
        | -------------------------| -----------------------| ----------------------|
        | Private                  | DEFAULT                | HOMEEMAIL             |
        | Contact                  | DEFAULT                | HOMEEMAIL2            |
        | Other                    | DEFAULT                | HOMEEMAIL3            |

        The API allows to use any string value for the contactPurposeTypeCode and the contactMethodTypeCode properties.
        Note that some clients can count with the recommended values. If different values are used, it is possible that the clients won't work correctly.

        The default email is an email with contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOMEEMAIL.

        The email is always stored with both contactPurposeTypeCode and contactMethodTypeCode.
        Although the contactPurposeTypeCode and contactMethodTypeCode are not mandatory, it is very recommended to always fill these values.
        If these values are not filled, DEFAULT value is always automatically filled to the contactPurposeTypeCode and HOMEEMAIL value to the contactMethodTypeCode.
        The next filled contactMethodTypeCode values are HOMEEMAIL2, HOMEEMAIL3, etc.
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        marketingAllowed:
          description: Denotes if the contact email address data can be used for marketing
            purposes.
          type: boolean
        contactPurposeTypeCode:
          allOf:
          - $ref: '#/components/schemas/ContactPurposeTypeCode'
        contactMethodTypeCode:
          allOf:
          - $ref: '#/components/schemas/ContactMethodEmailTypeCode'
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX30_256'
      required:
      - email
    CustomerPhone:
      description: |
        Telephone or fax number.

        Recommended values for contactPurposeTypeCode and contactMethodTypeCode:
        | Telephone Type           | ContactPurposeTypeCode | ContactMethodTypeCode |
        | -------------------------| -----------------------| ----------------------|
        | Phone                    | DEFAULT                | HOMETELEPHONE         |
        | Mobile                   | DEFAULT                | HOMEMOBILEPHONE       |
        | Other                    | DEFAULT                | HOMETELEPHONE2        |
        | Fax                      | DEFAULT                | HOMEFAX               |

        The API allows to use any string value for the contactPurposeTypeCode and the contactMethodTypeCode properties.
        Note that some clients can count with the recommended values. If different values are used, it is possible that the clients won't work correctly.

        The default phone is a phone with contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOMETELEPHONE.

        The phone is always stored with both contactPurposeTypeCode and contactMethodTypeCode.
        Although the contactPurposeTypeCode and contactMethodTypeCode are not mandatory, it is very recommended to always fill these values.
        If these values are not filled, DEFAULT value is always automatically filled to the contactPurposeTypeCode and HOMETELEPHONE value to the contactMethodTypeCode.
        The next filled contactMethodTypeCode values are HOMETELEPHONE2, HOMETELEPHONE3, etc.
      type: object
      properties:
        phoneNumber:
          allOf:
          - $ref: '#/components/schemas/PhoneNumber'
        contactPurposeTypeCode:
          allOf:
          - $ref: '#/components/schemas/ContactPurposeTypeCode'
        contactMethodTypeCode:
          allOf:
          - $ref: '#/components/schemas/ContactMethodPhoneTypeCode'
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX30_256'
      required:
      - phoneNumber
    PagingRequest:
      description: Indication of which page is being requested by the client.
      type: object
      properties:
        limit:
          description: Maximal count of results.
          type: integer
          format: int32
        offset:
          description: Count of results, which were skipped and not returned.
          type: integer
          format: int64
        returnTotalRecords:
          description: Indicates if field totalRecords in response should be filled.
          type: boolean
          default: false
      required:
      - limit
      - offset
    PagingResponse:
      description: Indication of which page is being returned by the server.
      type: object
      properties:
        limit:
          description: Maximal count of results.
          type: integer
          format: int32
        offset:
          description: Count of results, which were skipped and not returned.
          type: integer
          format: int64
        totalRecords:
          description: Number of found results.
          type: integer
          format: int64
      required:
      - limit
      - offset
    QueryLimit:
      description: Maximal count of results.
      type: integer
      format: int32
      minimum: 0
    QueryOffset:
      description: Count of results, which will be skipped and not returned.
      type: integer
      format: int64
      minimum: 0
    QueryReturnTotalRecords:
      description: Indicates if field totalRecords in response should be filled.
      type: boolean
      default: false
    FulltextCustomersSorting:
      description: Define the sorting field and sort direction. To indicate sorting
        direction, fields may be prefixed with + (ascending) or - (descending), e.g.
        +firstName,-lastName. Default sorting is +username
      type: string
      x-extensible-enum:
      - customerId
      - firstName
      - lastName
      - organizationName
      - name
      - username
      - email
      - street
      - city
      - postalCode
      - phoneNumber
    CustomersSorting:
      description: Comma-separated list of fields to define the sorting order. To
        indicate sorting direction, fields may be prefixed with + (ascending) or -
        (descending), e.g. ?sorting=+createdDate,-lastModifiedDate. Possible values
        are createdDate, lastModifiedDate, lastAccessDate, customerId, firstName,
        lastName, street, city, postalCode, userName and email"
      type: string
    CustomPropertiesFieldXX30_256:
      description: Field customProperties of the type CustomPropertiesXX30_256 that
        is encapsulated in an object.
      type: object
      properties:
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX30_256'
    CustomPropertiesNullableFieldXX30_256:
      description: Nullable field customProperties of the type CustomPropertiesXX30_256
        that is encapsulated in an object.
      type: object
      properties:
        customProperties:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/CustomPropertiesXX30_256'
    CommonCustomerProperties:
      description: Customer properties common for all customer types.
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        emails:
          description: Emails of the customer. The default email is an email with
            contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOMEEMAIL.
          type: array
          items:
            $ref: '#/components/schemas/CustomerEmail'
        phones:
          description: Phone numbers of the customer. The default phone is a phone
            with contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOMETELEPHONE.
          type: array
          items:
            $ref: '#/components/schemas/CustomerPhone'
        addresses:
          description: List of the addresses. The default address is an address with
            contactPurposeTypeCode=DEFAULT with and contactMethodTypeCode=HOME.
          type: array
          items:
            $ref: '#/components/schemas/CustomerAddress'
        taxNumber:
          description: Tax ID.
          type: string
          maxLength: 40
        customerCards:
          description: List of the customer cards.
          type: array
          items:
            $ref: '#/components/schemas/CustomerCard'
        customerGroupIds:
          description: List of customer group IDs.
          type: array
          items:
            type: string
        statisticalUseAllowed:
          allOf:
          - $ref: '#/components/schemas/StatisticalUseAllowed'
          default: false
        dataProtectCode:
          $ref: '#/components/schemas/DataProtectCode'
        declarationAvailable:
          description: Denotes if the customer declaration is available.
          type: boolean
        marketingAllowedFlag:
          description: Denotes if the contact address data can be used for marketing
            purposes.
          type: boolean
        allowedTermsOfPayment:
          description: Denotes the group of allowed tenders.
          type: string
          maxLength: 40
        recordedBy:
          description: Identification of person who has recorded the customer declaration
            (e.g. ID of logged Operator).
          type: string
          maxLength: 255
        creditLimit:
          description: Credit limit of the customer.
          type: number
        prohibitedTermsOfPayment:
          description: Denotes the group of prohibited tenders.
          type: string
          maxLength: 40
        remainingCreditLimit:
          description: Remaining credit limit of the customer. (Total credit limit
            - amounts of invoices which haven't been paid yet).
          type: number
        salesTaxLiableFlag:
          description: Determines whether the customer is liable to tax on sales
          type: boolean
        preferredReceiptPrintoutTypeCode:
          description: Default printout mode of the customer.
          type: string
          maxLength: 20
        parentCustomerId:
          description: A unique system assigned identifier for the Customer.
          allOf:
          - $ref: '#/components/schemas/CustomerId'
    CommonCustomerNullableProperties:
      description: Customer properties common for all customer types.
      type: object
      properties:
        username:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Username'
        countryCode:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/CountryCode'
        emails:
          description: Emails of the customer. The default email is an email with
            contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOMEEMAIL.
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/CustomerEmail'
        phones:
          description: Phone numbers of the customer. The default phone is a phone
            with contactPurposeTypeCode=DEFAULT and contactMethodTypeCode=HOMETELEPHONE.
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/CustomerPhone'
        addresses:
          description: List of the addresses. The default address is an address with
            contactPurposeTypeCode=DEFAULT with and contactMethodTypeCode=HOME.
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/CustomerAddress'
        taxNumber:
          description: Tax ID.
          nullable: true
          type: string
          maxLength: 40
        customerCards:
          description: List of the customer cards.
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/CustomerCard'
        customerGroupIds:
          description: List of customer group IDs.
          nullable: true
          type: array
          items:
            type: string
        declarationAvailable:
          description: Denotes if the customer declaration is available.
          nullable: true
          type: boolean
        marketingAllowedFlag:
          description: Denotes if the contact address data can be used for marketing
            purposes.
          nullable: true
          type: boolean
        statisticalUseAllowed:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/StatisticalUseAllowed'
        recordedBy:
          description: Identification of person who has recorded the customer declaration
            (e.g. ID of logged Operator).
          nullable: true
          type: string
          maxLength: 255
        dataProtectCode:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/DataProtectCode'
        allowedTermsOfPayment:
          description: Denotes the group of allowed tenders.
          nullable: true
          type: string
          maxLength: 40
        creditLimit:
          description: Credit limit of the customer.
          nullable: true
          type: number
        prohibitedTermsOfPayment:
          description: Denotes the group of prohibited tenders.
          nullable: true
          type: string
          maxLength: 40
        remainingCreditLimit:
          description: Remaining credit limit of the customer. (Total credit limit
            - amounts of invoices which haven't been paid yet).
          nullable: true
          type: number
        salesTaxLiableFlag:
          description: Determines whether the customer is liable to tax on sales
          nullable: true
          type: boolean
        preferredReceiptPrintoutTypeCode:
          description: Default printout mode of the customer.
          nullable: true
          type: string
          maxLength: 20
        parentCustomerId:
          description: A unique system assigned identifier for the Customer.
          nullable: true
          allOf:
          - $ref: '#/components/schemas/CustomerId'
    CommonCustomerReadOnlyProperties:
      description: Customer read-only properties common for all customer types.
      type: object
      properties:
        customerId:
          allOf:
          - $ref: '#/components/schemas/CustomerId'
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/CustomerStatus'
          readOnly: true
        createdDate:
          description: Creation date
          type: string
          format: date-time
          readOnly: true
        lastModifiedDate:
          description: Date of last change
          type: string
          format: date-time
          readOnly: true
        customerIdentifications:
          description: A list of numbers that may be used to identify a customer.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomerIdentification'
        parentCustomerFirstName:
          description: First Name Line of the customer to which this buyer / contact
            person belongs.
          allOf:
          - $ref: '#/components/schemas/FirstName'
          readOnly: true
        parentCustomerLastName:
          description: Last Name Line of the customer to which this buyer / contact
            person belongs.
          allOf:
          - $ref: '#/components/schemas/LastName'
          readOnly: true
      required:
      - customerId
      - status
    PersonalCustomerProperties:
      description: Personal customer specific properties.
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        languageCode:
          $ref: '#/components/schemas/LanguageCode'
        gender:
          $ref: '#/components/schemas/Gender'
        salutation:
          $ref: '#/components/schemas/Salutation'
        birthday:
          $ref: '#/components/schemas/Birthday'
      required:
      - firstName
      - lastName
    PersonalCustomerNullableProperties:
      description: Personal customer specific properties.
      type: object
      properties:
        firstName:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/FirstName'
        lastName:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/LastName'
        languageCode:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/LanguageCode'
        gender:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Gender'
        salutation:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Salutation'
        birthday:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Birthday'
    OrganizationalCustomerProperties:
      description: Organizational customer specific properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/OrganizationName'
        legalStatusCode:
          $ref: '#/components/schemas/OrganizationLegalStatusCode'
      required:
      - name
    OrganizationalCustomerNullableProperties:
      description: Organizational customer specific properties.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/OrganizationName'
        legalStatusCode:
          $ref: '#/components/schemas/OrganizationLegalStatusCode'
    Consent:
      description: It determines if the customer agrees with providing his/her personal
        data for getting personalized offers and recommendations.
      type: boolean
    PersonalizationConsentProperties:
      type: object
      properties:
        personalizationConsent:
          $ref: '#/components/schemas/PersonalizationConsent'
    PersonalizationConsent:
      description: Personal data for getting personalized offers and recommendations.
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/Consent'
        createdTimestamp:
          description: Date and time of creation
          type: string
          format: date-time
        userId:
          $ref: '#/components/schemas/UserId'
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        workstationId:
          $ref: '#/components/schemas/WorkstationId'
        customProperties:
          $ref: '#/components/schemas/CustomPropertiesXX30_256'
      required:
      - consent
      - createdTimestamp
    PersonalizationConsentRequestProperties:
      type: object
      properties:
        personalizationConsent:
          $ref: '#/components/schemas/PersonalizationConsentRequest'
    PersonalizationConsentRequest:
      description: Personal data for getting personalized offers and recommendations.
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/Consent'
      required:
      - consent
    IdentityAlphaNumeric40:
      type: string
      maxLength: 40
    Gender:
      description: |
        - MALE: male
        - FEMALE: female
        - NON_BINARY: neither male neither female
        - UNKNOWN: customer doesn't know its gender yet
        - NOT_SPECIFIED: customer doesn't want to specify its gender
      type: string
      x-extensible-enum:
      - MALE
      - FEMALE
      - NON_BINARY
      - UNKNOWN
      - NOT_SPECIFIED
    LanguageCode:
      description: 'Two-letter country code defined in ISO 639-1. Examples: en, de,
        cs.'
      type: string
      minLength: 2
      maxLength: 2
      pattern: ^[a-z]{2}$
    CountryCode:
      description: 'Two-letter country code defined in ISO 3166-1. Examples: GB, DE,
        CZ.'
      type: string
      minLength: 2
      maxLength: 2
      pattern: ^[A-Z]{2}$
    TenantId:
      description: A tenant identification.
      type: string
      minLength: 1
      maxLength: 3
      example: '001'
    IsoCurrencyCode:
      description: ISO 4217 alpha currency code.
      type: string
      maxLength: 3
      minLength: 3
      example: USD
    CustomProperties:
      description: |
        Additional data to be passed over the API.
      type: object
      additionalProperties:
        type: string
    CustomPropertiesXX5_256:
      description: |
        Additional data to be passed over the API. All xxCustom* properties are automatically persisted and/or
        loaded from database, other (undefined) properties are not. All well-known xxCustom* properties
        are defined in `CustomPropertiesXX5KeyEnum`. Allowed value length for these keys is limited to 256 characters.
      type: object
      additionalProperties:
        type: string
    CustomPropertiesXX5_1024:
      description: |
        Additional data to be passed over the API. All xxCustom* properties are automatically persisted and/or
        loaded from database, other (undefined) properties are not. All well-known xxCustom* properties
        are defined in `CustomPropertiesXX5KeyEnum`. Allowed value length for these keys is limited to 1024 characters.
      type: object
      additionalProperties:
        type: string
    CustomPropertiesXX15_256:
      description: |
        Additional data to be passed over the API. All xxCustom* properties are automatically persisted and/or
        loaded from database, other (undefined) properties are not. All well-known xxCustom* properties
        are defined in `CustomPropertiesXX15KeyEnum`. Allowed value length for these keys is limited to 256 characters.
      type: object
      additionalProperties:
        type: string
    CustomPropertiesXX30_256:
      description: |
        Additional data to be passed over the API. All xxCustom* properties are automatically persisted and/or
        loaded from database, other (undefined) properties are not. All well-known xxCustom* properties
        are defined in `CustomPropertiesXX30KeyEnum`. Allowed value length for these keys is limited to 256 characters.
      type: object
      additionalProperties:
        type: string
    CustomPropertiesXX30_1024:
      description: |
        Additional data to be passed over the API. All xxCustom* properties are automatically persisted and/or
        loaded from database, other (undefined) properties are not. All well-known xxCustom* properties
        are defined in `CustomPropertiesXX30KeyEnum`. Allowed value length for these keys is limited to 1024 characters.
      type: object
      additionalProperties:
        type: string
    CustomPropertiesXX5KeyEnumBase:
      description: Enum of the keys that are well-known for `CustomPropertiesXX5_*`.
      type: string
      enum:
      - xxCustom01
      - xxCustom02
      - xxCustom03
      - xxCustom04
      - xxCustom05
    CustomPropertiesXX15KeyEnumBase:
      description: Enum of xxCustom* keys that are well-known for `CustomPropertiesXX15_*`.
      type: string
      enum:
      - xxCustom01
      - xxCustom02
      - xxCustom03
      - xxCustom04
      - xxCustom05
      - xxCustom06
      - xxCustom07
      - xxCustom08
      - xxCustom09
      - xxCustom10
      - xxCustom11
      - xxCustom12
      - xxCustom13
      - xxCustom14
      - xxCustom15
    CustomPropertiesXX30KeyEnumBase:
      description: Enum of xxCustom* keys that are well-known for `CustomPropertiesXX30_*`.
      type: string
      enum:
      - xxCustom01
      - xxCustom02
      - xxCustom03
      - xxCustom04
      - xxCustom05
      - xxCustom06
      - xxCustom07
      - xxCustom08
      - xxCustom09
      - xxCustom10
      - xxCustom11
      - xxCustom12
      - xxCustom13
      - xxCustom14
      - xxCustom15
      - xxCustom16
      - xxCustom17
      - xxCustom18
      - xxCustom19
      - xxCustom20
      - xxCustom21
      - xxCustom22
      - xxCustom23
      - xxCustom24
      - xxCustom25
      - xxCustom26
      - xxCustom27
      - xxCustom28
      - xxCustom29
      - xxCustom30
  responses:
    400_BadRequest:
      description: Invalid or missing parameter/s in the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    401_Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    403_Forbidden:
      description: The operation was forbidden for the given resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    404_NotFound:
      description: Object was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    409_Conflict:
      description: The call is conflicting with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    412_PreconditionFailed:
      description: Indicates that access to the target resource has been denied. This
        happens with conditional requests on methods other than GET or HEAD when the
        condition defined by the If-Unmodified-Since, If-Match or If-None-Match headers
        is not fulfilled. In that case, the request, usually an upload or a modification
        of a resource, cannot be made and this error response is sent back.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    500_InternalServerError:
      description: An unexpected server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    502_BadGateway:
      description: Communication to an external resource failed or an invalid response
        returned from the upstream server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
